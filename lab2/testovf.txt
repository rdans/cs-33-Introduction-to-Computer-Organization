Examine integer overflow handling

1. with -O2
$ gcc -c -O2 testovf.c
$ objdump -d testovf.o

0000000000000000 <testovf>:
   0:   31 c0                   xor    %eax,%eax
   2:   c3                      retq

This flags make an optimization to the code, thus since there is an overflow, compiler will automatically 
return 0 by xor-ing the eax.


2. with -O2 -fwrapv 
$ gcc -c -O2 -fwrapv testovf.c
$ objdump -d testovf.o

0000000000000000 <testovf>:
   0:   48 b8 ff ff ff ff ff    movabs $0x7fffffffffffffff,%rax
   7:   ff ff 7f
   a:   48 01 f8                add    %rdi,%rax
   d:   48 39 c7                cmp    %rax,%rdi
  10:   0f 9f c0                setg   %al
  13:   c3                      retq

Based on the resulting assembly-language files, we can see that -fwrapv flag will just ignore the overflow
and keep doing the computation, and adding 2 large numbers that create an overflow will result 
in a small number.


3. with -O2 -fsanitize=undefined. 
$ gcc -c -O2 -fsanitize=undefined testovf.c
$ objdump -d testovf.o
0000000000000000 <testovf>:
   0:   55                      push   %rbp
   1:   53                      push   %rbx
   2:   48 ba ff ff ff ff ff    movabs $0x7fffffffffffffff,%rdx
   9:   ff ff 7f
   c:   48 89 fd                mov    %rdi,%rbp
   f:   48 89 fb                mov    %rdi,%rbx
  12:   48 83 ec 08             sub    $0x8,%rsp
  16:   48 01 d5                add    %rdx,%rbp
  19:   70 0d                   jo     28 <testovf+0x28>
  1b:   48 39 eb                cmp    %rbp,%rbx
  1e:   0f 9f c0                setg   %al
  21:   48 83 c4 08             add    $0x8,%rsp
  25:   5b                      pop    %rbx
  26:   5d                      pop    %rbp
  27:   c3                      retq
  28:   48 89 fe                mov    %rdi,%rsi
  2b:   bf 00 00 00 00          mov    $0x0,%edi
  30:   e8 00 00 00 00          callq  35 <testovf+0x35>
  35:   eb e4                   jmp    1b <testovf+0x1b>

here, I don't quite understand what is the machine trying to do, but then I try again using a different command

$ gcc -S -fno-asynchronous-unwind-tables -O2 -fsanitize=undefined testovf.c
$ emacs testovf.s
testovf:
        pushq   %rbp
        pushq   %rbx
        movabsq $9223372036854775807, %rdx
        movq    %rdi, %rbp
        movq    %rdi, %rbx
        subq    $8, %rsp
        addq    %rdx, %rbp
        jo      .L6
.L2:
        cmpq    %rbp, %rbx
        setg    %al
        addq    $8, %rsp
        popq    %rbx
        popq    %rbp
        ret
.L6:
        movq    %rdi, %rsi
        movl    $.Lubsan_data0, %edi
        call    __ubsan_handle_add_overflow
        jmp     .L2
        .size   testovf, .-testovf
        .section        .rodata.str1.1,"aMS",@progbits,1

flag -fsanitize=undefined itself is a fast undefined behavior detector. It seems that in the assembly code,
they doing a test to check the overflow. In .L6, it calls __ubsan_handle_add_overflow, which is an addition
overflow handler, then jump to .L2 which return a boolean expression using lower 8 bit of the computation.





